 - uses: actions/checkout@v3.5.2
    - name: build
      run: ./buildmyartifact.sh
    - name: publish to artifactory
      uses: nomadops/artifactory-action@v0
      with:
        url: 'https://company.jfrog.io/'
        credentials type: 'apikey'
        apikey: ${{ secrets.RT_APIKEY }}
        args: gp ${{ steps.tag_version.outputs.new_tag }} --server-id rt-server

    - name: search from artifactory
      if: success()
      uses: nomadops/artifactory-action@v0
      with:
         url: ${{ secrets.RT_URL }}
         credentials type: 'username'
         password: ${{ secrets.RT_APIKEY }}
         user: ${{ secrets.RT_USER }}
         args: rt s "go-local/github.com/username/artifactory-demo/@v/${{ steps.tag_version.outputs.new_tag }}.zip" --include-dirs --recursive
---
# TODO  https://github.com/marketplace/actions/aws-ecr
 - uses: docker://ghcr.io/kciter/aws-ecr-action:latest
   with:
     access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
     secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
     account_id: ${{ secrets.AWS_ACCOUNT_ID }}
     repo: docker/repo
     region: ap-northeast-2
     tags: latest,${{ github.sha }}
     create_repo: true
     image_scanning_configuration: true
     set_repo_policy: true
     repo_policy_file: repo-policy.json

# TODO Login to Amazon ECR Private, then build and push a Docker image:
 - name: Login to Amazon ECR
   id: login-ecr
   uses: aws-actions/amazon-ecr-login@v2

 - name: Build, tag, and push docker image to Amazon ECR
   env:
     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
     REPOSITORY: my-ecr-repo
     IMAGE_TAG: ${{ github.sha }}
   run: |
     docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

# TODO Login to Amazon ECR Public, then build and push a Docker image:

 - name: Login to Amazon ECR Public
   id: login-ecr-public
   uses: aws-actions/amazon-ecr-login@v2
   with:
     registry-type: public

 - name: Build, tag, and push docker image to Amazon ECR Public
   env:
     REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
     REGISTRY_ALIAS: my-ecr-public-registry-alias
     REPOSITORY: my-ecr-public-repo
     IMAGE_TAG: ${{ github.sha }}
   run: |
     docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
     docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
---
# WIP: Amazon EKS on AWS Fargate GitHub Actions
 on: [push]

 jobs:
   create_cluster:
     runs-on: ubuntu-latest
     name: Create an EKS on Fargate cluster
     steps:
       - name: Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: eu-west-1
       - name: Provision cluster
         uses: aws-actions/amazon-eks-fargate@v0.1