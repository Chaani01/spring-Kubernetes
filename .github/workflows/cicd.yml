name: spring-boot Github Actions

on:
  push:
    branches: [ "master" ]
env:
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
  ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}

jobs:
  Building-and-Testing:
    runs-on: ubuntu-latest
    #Todo Not strictly needed for Docker Hub, but good to include if you might switch.
    #Todo Required to push to GitHub Container Registry (ghcr.io)
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven' # Strongly recommended for faster builds!
          cache-dependency-path: 'pom.xml' # Or '**/pom.xml' for multi-module projects

      - name: Build with Maven (No Tests)
        run: mvn clean install -DskipTests -B # -B for batch mode (non-interactive)

      - name: Run Unit Tests
        run: mvn test -B # -B for batch mode (non-interactive)

      # Optional: Add integration tests as a separate step
      - name: Run Integration Tests
        run: mvn verify -Pintegration-tests # Assuming you have a profile for ITs

        # Optional: Package and create artifact (if not already done by 'install')
        # This is especially useful if 'install' wasn't used, or you want a fresh package post-tests
      - name: Package Application
        run: mvn package -DskipTests -B # Skip tests again if they already ran
        #   This step is usually redundant if 'mvn clean install' was used as it also packages

        # Optional: Upload build artifacts (e.g., JAR/WAR file)
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: your-application-artifact
          path: target/*.jar # Adjust path as needed (e.g., target/*.war)
          # retain-days: 5 # Good practice to limit retention for production artifacts
      - name: Simulate Build and Create Artifacts
        # In a real application, this would be your actual build command (e.g., mvn package, npm run build)
        # which outputs files to a 'target' or 'dist' directory.
        # Here, we create a 'staging' directory and a dummy file to represent your build output.
        run: |
          echo "Simulating application build..."
          mkdir -p staging/app
          echo "This is your compiled application or build artifact." > staging/app/my-app.txt
          echo "Build version: ${{ github.run_number }}" > staging/app/version.txt
          echo "Build output created in 'staging' directory."    

      - name: Upload Build Artifact
        # This step takes the 'staging' directory and uploads it as an artifact
        # named 'application-package'. This artifact can then be downloaded by other jobs.
        uses: actions/upload-artifact@v4
        with:
          name: application-package # A descriptive name for your artifact
          path: staging/             # The path to the directory or file(s) to upload
          # retention-days: 5        # Optional: How long to retain the artifact (e.g., 5 days).
          # Good practice for managing storage in production.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # Using the official Docker login action
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Accessing the username from GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # Accessing the password/token from GitHub Secrets

      - name: Build docker image
        run: docker build -t spring-application-k8s .
      - name: Tag docker image
        run: docker tag spring-application-k8s srinu641/spring-application-k8s:v3.02
      - name: Push docker image
        run: docker push srinu641/spring-application-k8s:v3.02
      - name: Getting Docker Images
        run: |
          docker images
          docker ps -a

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.20.0 # Use a specific version for stability
        with:
          image-ref: 'spring-application-k8s' # Scan the locally built image
          format: 'sarif' # Recommended for GitHub Code Scanning integration
          output: 'trivy-results.sarif'
          exit-code: '1' # Fail the action if vulnerabilities are found
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH' # Only report critical and high severity issues

#      - name: Build Spring Boot application
#        run: |
#          ./mvnw clean package -DskipTests # Use mvnw for Maven, or ./gradlew build for Gradle
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Build, tag, and push Docker image to ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }} # Use commit SHA as image tag for uniqueness
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#
#      - name: Download existing task definition
#        run: |
#          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} --query taskDefinition > task-definition.json
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: render-task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{ env.ECS_CONTAINER_NAME }}
#          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
#
#      - name: Deploy to Amazon ECS service
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true # Wait for the service to become stable