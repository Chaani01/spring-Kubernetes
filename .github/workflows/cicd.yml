name: spring-boot Github Actions

on:
  push:
    branches: [ "master" ]
  # TODO [ minute (0-59) hour (0 - 23)	day of the month (1 - 31)	month (1 - 12)	day of the week (0 - 6) ]
  # TODO Every minute, only on Friday, only in August
  schedule:
    - cron: '* * * 8 5'

env:
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  JAVA_VERSION: 21 #${{ environment.JAVA_VERSION }}
  MAVEN_VERSION: 3.8.2
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  JF_USER: ${{ secrets.JF_USER }}
  JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
  JF_URL: ${{ secrets.JF_URL}}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
  ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}
  ARGO_CD_SERVER: ${{ secrets.ARGO_CD_SERVER }}
  ARGO_CD_USERNAME: ${{ secrets.ARGO_CD_USERNAME }}
  ARGO_CD_PASSWORD: ${{ secrets.ARGO_CD_PASSWORD }}
  GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
  GIT_EMAIL: ${{ secrets.GIT_EMAIL }}

jobs:
  Building-and-Testing:
    runs-on: ubuntu-latest
    #Todo Not strictly needed for Docker Hub, but good to include if you might switch.
    #Todo Required to push to GitHub Container Registry (ghcr.io)
    permissions:
      contents: read
      packages: write
    steps:
      - name: Run a script
        run: echo "This workflow runs at Everyone One Hour "
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Todo Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}   # Todo Make It '21'
          distribution: 'temurin' # 'adopt'
          architecture: x64
          cache: 'maven' # Strongly recommended for faster builds!
          cache-dependency-path: 'pom.xml' # Or '**/pom.xml' for multi-module projects
      - name: Setup Maven
        uses: stCarolas/setup-maven@v4.4
        with:
          maven-version: ${{ env.MAVEN_VERSION }} #3.8.2
      - name: Build with Maven
        #TODO Compiles, packages, and installs to local Maven repo, explicitly skipping unit and integration tests.
        #TODO Use this when you only need to build the artifact without running any tests.
        run: mvn clean install

      - name: Run Unit Tests
        #TODO Executes only unit tests using the Maven Surefire Plugin.
        #TODO This is fast and ideal for quick feedback on code changes.
        run: mvn test

      - name: Run Integration Tests
        #TODO Executes integration tests using the Maven Failsafe Plugin.
        #TODO This phase includes prior build steps (compile, package, test) and is designed for integrated testing.
        run: |
          mvn clean verify
          mvn clean integration-test
      - name: Run Acceptance Tests
        #TODO Executes acceptance tests by activating a specific Maven profile named 'acceptance-tests'.
        #TODO This profile should contain the configuration for your acceptance testing framework (e.g., Cucumber, Selenium).
        run: mvn clean verify -Pacceptance-tests

      - name: Run Performance Tests
        #TODO Executes performance tests by activating a specific Maven profile named 'perf-tests'.
        #TODO This profile should encapsulate the execution of your performance testing tool (e.g., JMeter, Gatling).
        #TODO Often, performance tests are run less frequently due to their resource intensity.
        run: mvn clean verify -Pperf-tests

        # Optional: Upload build artifacts (e.g., JAR/WAR file)
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: your-application-artifact
          path: target/*.jar # Adjust path as needed (e.g., target/*.war)
          # retain-days: 5 # Good practice to limit retention for production artifacts
      - name: Simulate Build and Create Artifacts
        # In a real application, this would be your actual build command (e.g., mvn package, npm run build)
        # which outputs files to a 'target' or 'dist' directory.
        # Here, we create a 'staging' directory and a dummy file to represent your build output.
        run: |
          echo "Simulating application build..."
          mkdir -p staging/app
          echo "This is your compiled application or build artifact." > staging/app/my-app.txt
          echo "Build version: ${{ github.run_number }}" > staging/app/version.txt
          echo "Build output created in 'staging' directory."
      - name: Upload Build Artifact
        # This step takes the 'staging' directory and uploads it as an artifact
        # named 'application-package'. This artifact can then be downloaded by other jobs.
        uses: actions/upload-artifact@v4
        with:
          name: application-package # A descriptive name for your artifact
          path: staging/             # The path to the directory or file(s) to upload
          # retention-days: 5        # Optional: How long to retain the artifact (e.g., 5 days).
          # Good practice for managing storage in production.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # Using the official Docker login action
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Accessing the username from GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # Accessing the password/token from GitHub Secrets
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build docker image
        run: docker build -t spring-application-k8s .
      - name: Tag docker image
        run: docker tag spring-application-k8s srinu641/spring-application-k8s:v3.02
      - name: Push docker image
        run: docker push srinu641/spring-application-k8s:v3.02
      - name: Getting Docker Images
        run: |
          docker images
          docker ps -a
      # Todo Install Jfrog
      # Todo Reference link to install Jfrog --> https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/install
      - name: Install Jfrog
        run: |
          sudo mkdir -p /usr/share/keyrings;
          curl -fsSL https://releases.jfrog.io/artifactory/api/v2/repositories/jfrog-debs/keyPairs/primary/public | sudo gpg --dearmor -o /usr/share/keyrings/jfrog.gpg
          echo "deb [signed-by=/usr/share/keyrings/jfrog.gpg] https://releases.jfrog.io/artifactory/jfrog-debs focal contrib" | sudo tee /etc/apt/sources.list.d/jfrog.list
          sudo apt update;
          sudo apt install -y jfrog-cli-v2-jf;
          jf intro;
      #      - name: Setup JFrog CLI
      #        uses: jfrog/setup-jfrog-cli@v4
      #        env:
      #          JF_URL: ${{ secrets.JF_URL }}
      #          JF_USER: ${{ secrets.JF_USER }}
      #          JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
      #      - name: Download Artifacts
      #        run: jfrog rt dl artifacts/
      #      - name: Upload Artifacts
      #        run: jfrog rt u aether artifacts/
      #      - name: Publish Build Info
      #        run: jfrog rt bp

      # TODO Trivy Install
      - name: Install Trivy
        run: |
          sudo apt-get install -y wget gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
      # TODO  Scan the Image using Trivy
      - name: Trivy image scan
        run: trivy image srinu641/spring-application-k8s:v3.02 #todo Image Version

      #      - name: Scan Docker Image with Trivy
      #        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.sha }}
      # TODO SONARQUBE
      #      - uses: sonarsource/sonarqube-scan-action@master #Todo Optional [ SonarSource/sonarqube-scan-action@v5.0.0 ]
      #        env:
      #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Todo Install Sonarqube in Ec2 Instance Add EC2 DNS Domain in GitHub Secrets
      #        with:
      #          # Todo Sonarqube Project Name
      #          args: >
      #            -Dsonar.organization=Spring-Boot-Sonarqube
      #            -Dsonar.projectKey=SonarCloudCodeAnalyisis
      #            -Dsonar.python.coverage.reportPaths=coverage.xml
      #      # Todo Sonarqube quality gate
      #      - name: SonarQube Quality Gate check
      #        id: sonarqube-quality-gate-check
      #        uses: sonarsource/sonarqube-quality-gate-action@master
      #        with:
      #          pollingTimeoutSec: 600
      #        env:
      #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/argocd
      #      - name: Login to ArgoCD
      #        run: |
      #            argocd login ${{ secrets.ARGO_CD_SERVER }} \
      #                --username ${{ secrets.ARGO_CD_USERNAME }} \
      #                --password ${{ secrets.ARGO_CD_PASSWORD }} \
      #                --insecure

      # Todo AWS ECR Spring Boot
      #      - name: Configure AWS credentials
      #        uses: aws-action/configure-aws-credentials@v1
      #        with:
      #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #          aws-secret-access-key: ${{ secrets.AWS_SECRETS_KEY }}
      #          aws-region: us-east-1
      #
      #      - name: Login to Amazon ECR
      #        id: login-ecr
      #        uses: aws-actions/amazon-ecr-login@v1

      #      - name: Build ,Tag, and push too ECR
      #        env:
      #          ECP_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #          ECR_REGISTRY: repo_ecr_name
      #          IMAGE_TAG: ${{ github.sha }}
      #        run: |
      #          docker build -t $ECR_REGISTRY/$ECR_REGISTRY:v1.0
      #          docker push -a $ECR_REGISTRY/$ECR_REGISTRY:v1.0

      #      - name: Send Email Notification
      #        uses: dawidd6/action-send-mail@v3
      #        with:
      #          server_address: smtp.gmail.com
      #          server_port: 465
      #          username: ${{ secrets.EMAIL_USER }}
      #          password: ${{ secrets.EMAIL_PASS }}
      #          subject: "Docker Image Scan Report"
      #          to: ${{ secrets.EMAIL_TO }}
      #          from: GitHub CI/CD <${{ secrets.EMAIL_USER }}>
      #          body: "The Trivy scan report is attached. Job Done"
      #          attachments: trivy-report.json
      #TODO  Set up AWS Credentials
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      # Log in to Amazon ECR
#      - name: Log in to Amazon ECR
#        run: |
#          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
#
#      # Push image to Amazon ECR
#      - name: Push image to Amazon ECR
#        run: |
#          docker push ${{ secrets.ECR_REPOSITORY_URI}}/actions-cicd:latest
#        env:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      # Update Kubeconfig
#      - name: Update kubeconfig
#        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name actions-eks-cluster
#
#      # Install kubectl
#      - name: Install kubectl
#        run: |
#          curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
#          chmod +x ./kubectl
#          sudo mv ./kubectl /usr/local/bin/kubectl
#
#      # Deploy to Amazon EKS
#      - name: Deploy to EKS
#        run: |
#          kubectl apply -f k8s-manifests/deployment.yaml
#          kubectl apply -f k8s-manifests/service.yaml